#!/usr/bin/env ruby

require 'nokogiri'
require 'open-uri'
require 'fileutils'
require 'optparse'
$LOAD_PATH << File.expand_path(File.dirname(__FILE__), "/../lib")

options = {
  online: false,
  cycle: false
}

OptionParser.new do |opts|
  exec_name = File.basename($PROGRAM_NAME)
  opts.banner = <<-EOS
Find appropriate LinuxFormat number with desired word inside

Usage: #{exec_name} [options] query
EOS
  
  opts.on("--online", 'Online update') { options[:online] = true }
  opts.on("--cycle", 'Loop search') { options[:cycle] = true }
  opts.on("--help", 'Show help on command-line options') { puts opts.to_s ; exit 0 }
end.parse!

LOCAL_DIR = "html"
BASE_URL = "http://www.linuxformat.ru"
ARCHIVE_URL = "#{BASE_URL}/archive"
HEADERS_HASH = {"User-Agent" => "Ruby #{RUBY_VERSION}"}


FileUtils.makedirs(LOCAL_DIR) unless File.exists? LOCAL_DIR

page = Nokogiri::HTML(open(ARCHIVE_URL, HEADERS_HASH))

links = page.css('div.b-anons-cover a').map{ |a| a['href']}

links.each do |link|
  filename = LOCAL_DIR + link
  unless File.exists?(filename)
    puts "Getting " + BASE_URL + link
    File.open(filename, 'w') do |f|
      f.write(open(BASE_URL + link, HEADERS_HASH).read)
    end
  end
end

local_pages = links.sort
answer = "yes"
while answer != "n"
  puts "What do you search?:"
  query = gets.chomp

  local_pages.each do |page|
    filename= LOCAL_DIR + page
    html_source = open(filename).read
    if html_source.include?(query) or html_source.include?(query.upcase) or html_source.include?(query.capitalize)
      puts "LinuxFormat#" + /\d{2,3}/.match(page)[0] + "\n"
    end
  end
  10.times { print "---" }
  puts "\nContinue? (y/n)"
  answer = gets.chomp
end
